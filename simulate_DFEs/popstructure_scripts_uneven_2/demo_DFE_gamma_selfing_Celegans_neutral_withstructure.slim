//This script is to run a forward simulation with a deleterious DFE, a genome architecture, and different rates of selfing.
//Chromosome 1 size: 15Mb; ~45% intergenic, 25% intronic, 30% coding.
//ABout 1 gene per 5 kb. Each gene has 5 introns. 6 exons.
//average exon length: 200bp, median: 123bp.
//Median gene length: 2kb.
//Intron size: mode:47bp, median - 65 bp. Can probably use 100.
//Average rec rate for Chr 1: 3.12 cM/Mb
//Average mutn rate: 3.3e-9 per site/gen; Assume that 25% of all mutations are neutral in coding regions.
//Has a gamma shaped deleterious DFE.
//To run:
//slim -d d_seed=seed -d d_Ncur=5000 -d d_selfing_prob=0.99 -d d_beta=0.3 -d d_gamma_del=100 -d d_dom_del=0.5 -d d_f_pos=0.0 -d d_gamma_pos=0 -d d_dom_pos=0.5 -d "d_repID='replicate number'" -d "d_folder='folder name'" demo_DFE_gamma_selfing_Celegans.slim

initialize() {
    //setSeed(d_seed);

    //set genome structure parameters:
    inter_len = 3000;
    intron_len = 100;
    exon_len = 250;
    num_genes = 500; //3000 for the full chromosome
    num_exons = 6;
    num_introns = 5;
    full_block_len = inter_len + exon_len*num_exons + intron_len*num_introns;
    exon_block_len = exon_len + intron_len;
    
    //define pop gen parameters:
    defineConstant("Na", 5000);
    defineConstant("scaling_factor", 500000/Na);
    defineConstant("Nc", d_Ncur);
    defineConstant("mut_rate_mean", scaling_factor*3.3e-9);
    defineConstant("rec_rate_mean", scaling_factor*3.12*1e-8);
    defineConstant("f_neu", 0.25);//fraction of neutral mutations in coding regions
    defineConstant("gamma_del", d_gamma_del);
    defineConstant("s_del", gamma_del/(2.0*Na));
    defineConstant("gamma_pos", d_gamma_pos);
    defineConstant("s_pos", gamma_pos/(2.0*Na));
    print("mean strength of selection: " + s_pos);
    defineConstant("f_pos", d_f_pos);//fraction of beneficial mutations
    defineConstant("f_del", (1.0-f_pos-f_neu));//fraction of all deleterious classes
    print("fraction of all deleterious mutations: " + f_del);
    print("fraction of beneficial mutations: " + f_pos);
    defineConstant("migration_rate", d_migration_rate/4);//migration rate
    defineConstant("subpopSize", d_subpopSize);//size of subpopulations 

    // set the overall mutation rate map
    initializeMutationRate(mut_rate_mean);

    //define the DFE:
    initializeMutationType("m1", 0.5, "f", 0.0); //neutral coding, 2Nes = [0,-1]
    initializeMutationType("m2", d_dom_del, "g", -1.0*s_del, d_beta); //gamma distribution
    initializeMutationType("m3", 0.5, "f", 0.0); //neutral intergenic, 2Nes = 0
    initializeMutationType("m4", d_dom_pos, "e", s_pos); //beneficial class

    // g1 genomic element type: uses m1 for all mutations
    initializeGenomicElementType("g1", m3, 1.0); //intergenic
    initializeGenomicElementType("g2", m3, 1.0); //intronic
    initializeGenomicElementType("g3", c(m1, m2, m4), c(f_neu, 1.0-f_neu-f_pos, f_pos)); //exons, selected.

    //defining genes
    for (index_a in 0:(num_genes-1)){
        //print (index1);
        initializeGenomicElement(g1, (index_a*full_block_len), (index_a*full_block_len + inter_len-1)); //intergenic
        for (index_b in 0:(num_introns-1)){
            //print (index_a);
            //print (index_b);
            initializeGenomicElement(g3, ((index_a*full_block_len) + inter_len + (index_b*exon_block_len)), (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len - 1));//exon
            initializeGenomicElement(g2, (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len), (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len + intron_len-1));//intron
            }
        initializeGenomicElement(g3, (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len), (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len + exon_len - 1));//closing with exon
        }
    initializeGenomicElement(g1, full_block_len*num_genes, full_block_len*num_genes + inter_len - 1);//extra intergenic towards the end
    
    //constant recombination along the chromosome:
    initializeRecombinationRate(rec_rate_mean);
}
1 early() {
//subpopsize calc from eq. 7.3c on pg 318 of Charlesworth txt
    subpopCount = 5;
    print(subpopSize);
    for (i in 1:subpopCount)
        sim.addSubpop(i, subpopSize);
        //set the rate of selfing                                                   
    for (i in 1:subpopCount)
     	  for (j in 1:subpopCount)
        		if (i != j)
        			sim.subpopulations[i-1].setMigrationRates(j, migration_rate);
        			print(migration_rate);
    for (i in 1:subpopCount)
        sim.subpopulations[i-1].setSelfingRate(d_selfing_prob);
}
70000 early() {
    print("N at end of burn-in: " + p1.individualCount);
    //add any population size changes here if needed
    //newSize = Nc;
    //p1.setSubpopulationSize(asInteger(newSize));
}
70000 late(){
    sampledGen = sample(p1.genomes, 35, replace=F);
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "p1" + ".txt", append=F);
    sampledGen.outputMS(filePath=d_folder + "/output" + d_repID + "p1" + ".ms", append=F);
    sampledGen = sample(p2.genomes, 35, replace=F);
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "p2" +".txt", append=F);
    sampledGen.outputMS(filePath=d_folder + "/output" + d_repID + "p2" +".ms", append=F);
    sampledGen = sample(p3.genomes, 10, replace=F);
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "p3" +".txt", append=F);
    sampledGen.outputMS(filePath=d_folder + "/output" + d_repID + "p3" +".ms", append=F);
    sampledGen = sample(p4.genomes, 10, replace=F);
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "p4" +".txt", append=F);
    sampledGen.outputMS(filePath=d_folder + "/output" + d_repID + "p4" +".ms", append=F);
    sampledGen = sample(p5.genomes, 10, replace=F);
    sampledGen.output(filePath=d_folder + "/output" + d_repID + "p5" +".txt", append=F);
    sampledGen.outputMS(filePath=d_folder + "/output" + d_repID + "p5" +".ms", append=F);
    sim.outputFixedMutations(filePath=d_folder + "/output" + d_repID + ".fixed", append=F);
    print("N at the end of simulation: " + p1.individualCount);
    print("The last base in the chromosome: " + sim.chromosome.lastPosition);
    pi= calcHeterozygosity(sim.subpopulations.genomes);
    print(pi);
    writeFile(d_folder + "/output" + d_repID + "_pi.txt", asString(pi));
    pi_p1= calcHeterozygosity(p1.genomes);
    print("P1 pi: " + pi_p1);
    writeFile(d_folder + "/output" + d_repID + "_pi_p1.txt", asString(pi_p1));
    pi_p2= calcHeterozygosity(p2.genomes);
    print("P2 pi: " + pi_p2);
    writeFile(d_folder + "/output" + d_repID + "_pi_p2.txt", asString(pi_p2));
    pi_p3= calcHeterozygosity(p3.genomes);
    print("P2 pi: " + pi_p3);
    writeFile(d_folder + "/output" + d_repID + "_pi_p3.txt", asString(pi_p3));
    pi_p4= calcHeterozygosity(p4.genomes);
    print("P2 pi: " + pi_p4);
    writeFile(d_folder + "/output" + d_repID + "_pi_p4.txt", asString(pi_p4));
    pi_p5= calcHeterozygosity(p5.genomes);
    print("P2 pi: " + pi_p5);
    writeFile(d_folder + "/output" + d_repID + "_pi_p5.txt", asString(pi_p5));
    fst= calcFST(p1.genomes, p2.genomes);
    print("FST (p1 p2): " + fst);
    writeFile(d_folder + "/output" + d_repID + "_fst.txt", asString(fst));
}


