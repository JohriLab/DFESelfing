//This script is to run a forward simulation with a deleterious DFE, at a single base with no linkage, and different rates of selfing.
//Average rec rate is 0 for simplicity.
//Average mutn rate: 3.3e-9 per site/gen; Assume that 25% of all mutations are neutral in coding regions.
//Has a gamma shaped deleterious DFE.
//To run:
//slim -d d_seed=seed -d d_Ncur=5000 -d d_selfing_prob=0.99 -d d_beta=0.3 -d d_gamma_del=100 -d "d_repID='replicate number'" -d "d_folder='folder name'" demo_DFE_gamma_selfing_Celegans_unlinked_sel.slim

initialize() {
    //setSeed(d_seed);
    
    //define pop gen parameters:
    defineConstant("Na", 5000);
    defineConstant("scaling_factor", 500000/Na);
    defineConstant("Nc", d_Ncur);
    defineConstant("mut_rate_mean", scaling_factor*3.3e-9);
    defineConstant("rec_rate_mean", 0.0*scaling_factor*3.12*1e-8);
    
    defineConstant("gamma_del", d_gamma_del);
    defineConstant("s_del", gamma_del/(2.0*Na));
    defineConstant("s", rgamma(1, -1.0*s_del, d_beta));//sample an s from a gamma distribution
    
    // set the overall mutation rate map
    initializeMutationRate(mut_rate_mean);

    //define the DFE:
    initializeMutationType("m1", d_dom_del, "f", s);

    // g1 genomic element type: uses m1 for all mutations
    initializeGenomicElementType("g1", m1, 1.0);
    
    //genomic structure:
    initializeGenomicElement(g1, 0, 0);
    
    //constant recombination along the chromosome:
    initializeRecombinationRate(rec_rate_mean);
}
1 early() {
    sim.addSubpop("p1", Na);
    //set the rate of selfing                                                   
    p1.setSelfingRate(d_selfing_prob);
}
70000 early() {
    print("N at end of burn-in: " + p1.individualCount);
    //add any population size changes here if needed
    //newSize = Nc;
    //p1.setSubpopulationSize(asInteger(newSize));
}
70000 late(){
    sampledGen = sample(p1.genomes, 100, replace=F);
    
    print("number of SNPs:" + size(sampledGen.mutations));
    if (size(sampledGen.mutations) > 0){
        sampledGen.output(filePath=d_folder + "/output" + d_repID + ".txt", append=F);
    }
    print("number of substitutions:" + size(sim.substitutions));
    if (size(sim.substitutions) > 0){
        sim.outputFixedMutations(filePath=d_folder + "/output" + d_repID + ".fixed", append=F);
    }

    print("N at the end of simulation: " + p1.individualCount);
    print("The last base in the chromosome: " + sim.chromosome.lastPosition);
}


